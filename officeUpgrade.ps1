# officeUpgrade.ps1
# utility to remove all traces of Office from each system and deploy the latest version of Office
# Parameters:
#   $versionToRemove = user-specified version of Office to remove. Can be setup to auto-detect version of Office installed on system. Can also be setup to scrub all traces of Office from this system, including old installations.
#   $versionToInstall = which version of Office to install. By default, this is the current stable version of Office.
#   $configFile = which configuration file to use during install. This file is stored in the root of the "Office <version>" directory. Ex. "Office 2016". Default file ("config.msp") is auto-install config file for full Office suite.
#   config files are generated by the Office Customization Tool (setup.exe /admin) for each version of Office.

# Exit locations: end of script, end of repairOffice function

###################################################################################################
# "Preamble"
param (
    [int]$versionToRemove = 8,
    [int]$versionToInstall = 2016,
    [string]$configFile = "config.msp"
)

# Suppress errors (testing purposes)
# $ErrorActionPreference = 'silentlycontinue'

$shareLocation = "[PSDrive]:\[UNC_Path]\Microsoft\OfficeUpgrade"
$setupRootLocation = "[PSDrive]:\[UNC_Path]\Microsoft"

# Create new PSDrive object to refer to HKEY_Classes_Root
new-psDrive -name hkcr -psProvider Registry -root HKEY_CLASSES_ROOT

# Get current location
$scriptPath = split-path -parent $MyInvocation.MyCommand.Definition

###################################################################################################
# Functions
function autoRemoveOffice () {
    # Get current version of Office that is installed on this system.
    
    set-location hkcr:\
    
    # Registry Key path Not Found errors suppressed as the script tests two separate locations for the Office version key. It is expected that one (or both) tests will fail.
       # The script handles this by writing an error message to the screen and logging an error if neither key is found.
    If ($regKey = ((get-itemproperty -LiteralPath 'Registry::HKEY_CLASSES_ROOT\word.application\curVer' -ErrorAction SilentlyContinue) | select-object '(default)'  -expandproperty '(default)')) {
        # MSI version of Office installed
        write-host "true"
        $regKey = ((get-itemproperty -LiteralPath 'Registry::HKEY_CLASSES_ROOT\word.application\curVer' -ErrorAction SilentlyContinue) | select-object '(default)'  -expandproperty '(default)')
        write-host $regKey
        If ($regKey -eq "Word.Application.11")
        {
        
            set-location $shareLocation
            # Office 2003 Installed
            Write-Host "Office 2003 Installed"
            start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub03.vbs ALL /q /ose /s" -Verb runas -wait
            Write-Host "OffScript Removal of Office 2003 Complete"
        } elseif ($regKey -eq "Word.Application.12")
        {
            set-location $shareLocation
            # Office 2007 Installed
            Write-Host "Office 2007 Instaled"
            start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub07.vbs ALL /q /ose /s" -Verb runas -wait
            Write-Host "OffScript Removal of Office 2007 Complete"
        } elseif ($regKey -eq "Word.Application.14")
        {
            set-location $shareLocation
            # Office 2010 Installed
            Write-Host "Office 2010 Installed"
            start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub10.vbs ALL /q /ose /s" -Verb runas -wait
            Write-Host "OffScript Removal of Office 2010 Complete"
        } elseif ($regKey -eq 'Word.Application.15')
        {
            set-location $shareLocation
            # Office 2013 Installed
            Write-Host "Office 2013 Installed"
            Write-Host "By default, OffScrub for Office 2013 does not display its progress. This script will complete successfully anyway"
            start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub_O15msi.vbs ALL /q /ose /s" -Verb runas -wait
            Write-Host "OffScript Removal of Office 2013 complete"
        } elseif ($regKey -eq "Word.Application.16")
        {
            set-location $shareLocation
            # Office 2016 Installed
            Write-Host "Office 2016 Installed"
            Write-Host "By default, OffScrub for Office 2016 does not display its progress. This script will complete successfully anyway."
            start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub_O16msi.vbs ALL /q /ose /s" -Verb runas -Wait
            Write-Host "OffScript for Office 2016 complete"
        } else {
            Write-Host "MSI-based Office installation not detected. Determining if ClickToRun (C2R) used instead..."
        }
    } elseif ($regKey= (get-item -path 'hklm:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{90150000-008F-0000-1000-0000000FF1CE}' -ErrorAction SilentlyContinue) | select-object 'VersionMajor')
    {
        set-location $shareLocation
        # MSI Office Version Not detected
        # Detect if ClickToRun (C2R) via Registry key.
        # If this key exists, it suggests that an Office C2R program is installed.
        Write-Host "Office ClickToRun Installed (2013/2016/365)"
        Write-Host "By default, OffScrub for Office ClickToRun products does not display its progress. This script will complete successfully anyway"
        start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrubC2R.vbs All /q /ose /s" -Verb runas -wait
        Write-Host "OffScript for ClickToRun products complete"
    }
    else {
        # Could detect neither MSI nor C2R products. Likely a later version of Office is installed.
        Write-Host "Office Version Not Detected"
        Write-Host "Either Office is not installed or a newer version of Office is installed that is not supported by this script"
        Write-Host "Manual Intervention Suggested"
        "$(get-date) `t $env:computername `t uninstall failed -- could not auto-detect Office on this system" >> $shareLocation\errorLog.log
    }
} # End autoRemoveOffice

function cleanup(){
    # Cleanup script
    Write-host "Script cleanup started. Resetting symbolic links to local filesystem"
    # Return to script path
    set-location $scriptPath
   # Remove-psDrive -name shareLocation
   # Remove-psDrive -name setupRootLocation
    Remove-psdrive -name hkcr
    Write-host "Script cleanup finished"
    start-sleep -s 5 # Sleep for 5 seconds to allow user to read results
    $host.setShouldExit(0) # end script, return success. Terminate window.
} # End cleanup

function getKey() {
    # Auto-detect Office version via Registry key
    
    set-location hkcr:\
    # Registry Key Path Not Found exceptions suppressed as it is expected to fail at least one of these tests. The script will handle this exception elsewhere.
    write-host $hkcr
    if ($regKey = get-itemproperty -path ".\word.application\curVer" -ErrorAction SilentlyContinue | select-object '(default)') {
        # Auto-detected MSI-based Office install.
        $regKey = (get-itemproperty -path '.\word.application\curVer' -ErrorAction silentlycontinue) | select-object '(default)'
    } elseif ($regKey = get-item -path "hklm:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{90150000-008F-0000-1000-0000000FF1CE}" -ErrorAction SilentlyContinue | select-object 'VersionMajor') {
        # Auto-detected ClickToRun (C2R) Office install.
        $regKey = get-item -path 'hklm:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{90150000-008F-0000-1000-0000000FF1CE}' -ErrorAction SilentlyContinue | select-object 'VersionMajor'
    } else {
        # Could not auto-detect Office install.
        # Pass a dummy value back to the parent function, which will use this value to log an error.
        $regKey = 0
    }
    return $regKey
} # End getKey

function repairOffice (){
    set-location $setupRootLocation
    # Only 2013 & 2016 available for repair
    $regKey = Invoke-expression "getKey"
    if ($regKey -eq "Word.Application.15") {
        # Office 2013 installed
        # Repair office 2013 with silent repair script, auto-detected in ".\Office 2013\proplus.ww\configSilentRepair.xml"
        start-process ".\Office 2013\setup.exe" -ArgumentList '/repair', 'ProPlus' -Verb runas -wait
    } elseif ($regKey -eq "Word.Application.16") {
        # Office 2016 installed
        # Repair office 2016 with silent repair script, auto-detected in ".\Office 2016\proplus.ww\configSilentRepair.xml"
        start-process ".\Office 2016\setup.exe" -ArgumentList '/repair', 'ProPlus' -Verb runas -wait
    } elseif ($regKey -eq 0) {
        # Office cannot be detected
        Write-host "Office version cannot be detected for repair. Manual repair suggested"
        "$(get-date) `t $env:computername `t Could not detect version for repair" >> $shareLocation\errorLog.log
    } else {
        # Unsupported version
        Write-host "Unsupported Office version detected. Repairing this version is unsupported by this script. Manual repair suggested"
        "$(get-date) `t $env:computername : Unsupported Office version detected while attempting repair" >> $shareLocation\errorLog.log
    }
    "$(get-date) `t $env:computername `t Office repaired successfully" >> $shareLocation\installLog.log
    Invoke-Expression "cleanup"
    $host.setShouldExit(1)
    Exit # Force exit
} # End repairOffice

###################################################################################################
# Main

set-location $shareLocation

# If user specifies same version to remove as to install, assume repair install intended.
if (($versionToRemove -eq $versionToInstall) -and ($versionToRemove -ne 0)) {
    # Assume repair install
#    Invoke-expression "repairOffice"		commented-out for upload to GitHub.
    # Testing revealed that the script refused to exit before this point when attempting a repair. Attempt to force script to end.
    $host.setShouldExit(1)
    Exit-PSSession 
    break
    
} elseif (($versionToRemove -eq 0) -and ($versionToInstall -eq 0)) {
    # Do not remove, do not install
    # Do nothing
    write-host "User specified to neither remove Office nor install a new version. There is nothing to do."
    "$(get-date) `t $env:computername `t User specified to do nothing" >> $shareLocation\errorLog.log
    $host.setShouldExit(1)
    Exit-PSSession
    sleep -s 5 # allow user to read output
    break      # force terminate
}

# Repair or Remove Office
# If user specifies "0" as "version to Install", auto-detect & repair Office (if version supported)
# Else,  Remove old versions of Office
    # User can specify "8" to indicate auto-removal of Office, or simply not pass argument for script to assume auto-removal.
    # Auto-detect uses Registry key to remove latest version of Office currently installed.
    # User can specify version of Office to force uninstallation of older versions.
    # User can specify "All" versions of Office supported by this script by passing "411" to this script.

If ($versionToRemove -eq 0) {
    # Repair installation
    Write-Host "Repairing Office Installation based off auto-detect routine"
#    Invoke-expression "repairOffice"	commented-out prior to upload to GitHub
    $host.setShouldExit(1)
    Exit-PSSession
    break # Force termination.
} elseif ($versionToRemove -eq 8){
    # Detect Office Version & auto-remove
    Invoke-expression "autoRemoveOffice"
        
} elseif ($versionToRemove -eq 2003) {
    # User specified removal of Office 2003
    Write-host "User specified removal of Office $versionToRemove which may not actually be installed. This script will remove any remaining fragments of the installation"
    start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub03.vbs ALL /q /s /ose" -Verb runas -wait
    Write-Host "OffScript Removal of Office 2003 Complete"
    
} elseif ($versionToRemove -eq 2007) {
    # User specified removal of Office 2007
    Write-host "User specified removal of Office $versionToRemove which may not actually be installed. This script will remove any remaining fragments of the installation"
    start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub07.vbs ALL /q /s" -Verb runas -wait
    Write-Host "OffScript Removal of Office 2007 Complete"
    
} elseif ($versionToRemove -eq 2010) {
    # User specified removal of Office 2010
    Write-host "User specified removal of Office $versionToRemove which may not actually be installed. This script will remove any remaining fragments of the installation"
    start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub10.vbs ALL /q /s /ose" -Verb runas -wait
    Write-Host "OffScript Removal of Office 2010 Complete"
    
} elseif ($versionToRemove -eq 2013) {
    # User specified removal of Office 2013
    Write-host "User specified removal of Office $versionToRemove which may not actually be installed. This script will remove any remaining fragments of the installation"
    Write-Host "By default, OffScrub for Office 2013 does not display its progress. This script will complete successfully anyway"
    start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub_O15msi.vbs ALL /q /s /ose" -Verb runas -wait
    Write-Host "OffScript Removal of Office 2013 complete"
} elseif ($versionToRemove -eq 2016) {
    # User specified removal of Office 2016
    Write-host "User specified removal of Office $versionToRemove which may not actually be installed. This script will remove any remaining fragments of the installation"
    Write-Host "By default, OffScrub for Office 2016 does not display its progress. This script will complete successfully anyway."
    start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub_O16msi.vbs ALL /q /s /ose" -Verb runas -Wait
    Write-Host "OffScript for Office 2016 complete"
} elseif ($versionToRemove -eq 365) {
    # Remove all versions of Office ClickToRun programs
    # While this includes versions of Office 2013 & 2016, it primarily refers to Office 365. Hence the argument value.
    Write-Host "User specified removal of all ClickToRun (C2R) Office programs"
    start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrubC2R.vbs All /q /s /ose" -Verb runas -wait
    Write-Host "OffScript for Office ClickToRun (C2R) complete"
} elseif ($versionToRemove -eq 411) {
    # Remove all versions of Office. Very time-consuming!
    Write-host "User specified removal of all traces of Office on this system. This will concurrently run all OffScript scripts. This process is very time-consuming"
    Write-Host "Removing Office 2003"
    start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub03.vbs ALL /q /s /ose" -Verb runas -wait
    Write-Host "Removing Office 2007"
    start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub07.vbs ALL /q /s /ose" -Verb runas -wait    
    Write-Host "Removing Office 2010"
    start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub10.vbs ALL /q /s /ose" -Verb runas -wait
    Write-Host "Removing Office 2013"
    start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub_O15msi.vbs ALL /q /s /ose" -Verb runas -wait
    Write-Host "Removing Office 2016"
    start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrub_O16msi.vbs ALL /q /s /ose" -Verb runas -Wait
    Write-Host "Removing Office ClickToRun (C2R)"
    start-process cscript.exe -ArgumentList '//nologo', '//b', ".\OffScrubC2R.vbs All /q /s /ose" -Verb runas -wait
    Write-host "All OffScript scripts have run"
    
} else {
    # User passed bad argument to script
    # Detect Office Version & remove
    Invoke-expression "autoRemoveOffice"
}

Write-Host "Finished removal of Office."

# Clean install of Office
Write-Host "Attempting to install new version of Office"
<#
if($versionToInstall -eq "0"){
    # Do not install office
    Write-Host "User specified to not install Office"
    "$(get-date) `t $env:computername `t Did not install Office by user choice" >> $shareLocation\installLog.log
} elseif ($versionToInstall -eq "2013"){
    # Install Office 2013
    Write-host "Installing Office 2013 ProPlus"
    # adminfile for Office 2013 is hard-coded as this is not intended to be used in production.
    start-process "$setupRootLocation\Office 2013\setup.exe" -ArgumentList '/adminfile', ".\$configFile" -Verb runas -wait
    "$(get-date) `t $env:computername `t Installed Office 2013" >> $shareLocation\installLog.log
    Write-host "Installation Complete"
} elseif ($versionToInstall -eq "2016"){
    # Install Office 2016
    start-process "$setupRootLocation\Office 2016\setup.exe" -ArgumentList '/adminfile', ".\$configFile" -Verb runas -wait
    "$(get-date) `t $env:computername `t Installed Office 2016" >> $shareLocation\installLog.log
    Write-host "Installation Complete"
} else{
    # Install Office 2016 by default.
    start-process "$setupRootLocation\Office 2016\setup.exe" -ArgumentList '/adminfile', ".\$configFile" -Verb runas -wait
    "$(get-date) `t $env:computername `t Installed Office 2016" >> $shareLocation\installLog.log
    Write-host "Installation Complete"
}
#>
# Commented-out above lines prior to upload to GitHub

Invoke-expression "cleanup"

# End Main/Script
